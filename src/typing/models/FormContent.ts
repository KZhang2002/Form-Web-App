/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Form } from './Form';
import {
    FormFromJSON,
    FormFromJSONTyped,
    FormToJSON,
    FormToJSONTyped,
} from './Form';
import type { FormTemplateContent } from './FormTemplateContent';
import {
    FormTemplateContentFromJSON,
    FormTemplateContentFromJSONTyped,
    FormTemplateContentToJSON,
    FormTemplateContentToJSONTyped,
} from './FormTemplateContent';

/**
 * 
 * @export
 * @interface FormContent
 */
export interface FormContent {
    /**
     * 
     * @type {number}
     * @memberof FormContent
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof FormContent
     */
    contentData?: string;
    /**
     * 
     * @type {Form}
     * @memberof FormContent
     */
    form?: Form;
    /**
     * 
     * @type {FormTemplateContent}
     * @memberof FormContent
     */
    formTemplateContent?: FormTemplateContent;
}

/**
 * Check if a given object implements the FormContent interface.
 */
export function instanceOfFormContent(value: object): value is FormContent {
    return true;
}

export function FormContentFromJSON(json: any): FormContent {
    return FormContentFromJSONTyped(json, false);
}

export function FormContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormContent {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'contentData': json['contentData'] == null ? undefined : json['contentData'],
        'form': json['form'] == null ? undefined : FormFromJSON(json['form']),
        'formTemplateContent': json['formTemplateContent'] == null ? undefined : FormTemplateContentFromJSON(json['formTemplateContent']),
    };
}

export function FormContentToJSON(json: any): FormContent {
    return FormContentToJSONTyped(json, false);
}

export function FormContentToJSONTyped(value?: FormContent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'contentData': value['contentData'],
        'form': FormToJSON(value['form']),
        'formTemplateContent': FormTemplateContentToJSON(value['formTemplateContent']),
    };
}

