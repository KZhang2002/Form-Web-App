/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FormTemplate } from './FormTemplate';
import {
    FormTemplateFromJSON,
    FormTemplateFromJSONTyped,
    FormTemplateToJSON,
    FormTemplateToJSONTyped,
} from './FormTemplate';
import type { FormContent } from './FormContent';
import {
    FormContentFromJSON,
    FormContentFromJSONTyped,
    FormContentToJSON,
    FormContentToJSONTyped,
} from './FormContent';

/**
 * 
 * @export
 * @interface FormTemplateContent
 */
export interface FormTemplateContent {
    /**
     * 
     * @type {number}
     * @memberof FormTemplateContent
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof FormTemplateContent
     */
    contentName?: string;
    /**
     * 
     * @type {string}
     * @memberof FormTemplateContent
     */
    contentType?: string;
    /**
     * 
     * @type {Array<FormContent>}
     * @memberof FormTemplateContent
     */
    formContentSet?: Array<FormContent>;
    /**
     * 
     * @type {FormTemplate}
     * @memberof FormTemplateContent
     */
    formTemplate?: FormTemplate;
}

/**
 * Check if a given object implements the FormTemplateContent interface.
 */
export function instanceOfFormTemplateContent(value: object): value is FormTemplateContent {
    return true;
}

export function FormTemplateContentFromJSON(json: any): FormTemplateContent {
    return FormTemplateContentFromJSONTyped(json, false);
}

export function FormTemplateContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormTemplateContent {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'contentName': json['contentName'] == null ? undefined : json['contentName'],
        'contentType': json['contentType'] == null ? undefined : json['contentType'],
        'formContentSet': json['formContentSet'] == null ? undefined : ((json['formContentSet'] as Array<any>).map(FormContentFromJSON)),
        'formTemplate': json['formTemplate'] == null ? undefined : FormTemplateFromJSON(json['formTemplate']),
    };
}

export function FormTemplateContentToJSON(json: any): FormTemplateContent {
    return FormTemplateContentToJSONTyped(json, false);
}

export function FormTemplateContentToJSONTyped(value?: FormTemplateContent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'contentName': value['contentName'],
        'contentType': value['contentType'],
        'formContentSet': value['formContentSet'] == null ? undefined : ((value['formContentSet'] as Array<any>).map(FormContentToJSON)),
        'formTemplate': FormTemplateToJSON(value['formTemplate']),
    };
}

