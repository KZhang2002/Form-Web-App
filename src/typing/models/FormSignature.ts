/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FormTemplateSignature } from './FormTemplateSignature';
import {
    FormTemplateSignatureFromJSON,
    FormTemplateSignatureFromJSONTyped,
    FormTemplateSignatureToJSON,
    FormTemplateSignatureToJSONTyped,
} from './FormTemplateSignature';
import type { Form } from './Form';
import {
    FormFromJSON,
    FormFromJSONTyped,
    FormToJSON,
    FormToJSONTyped,
} from './Form';
import type { UserInfo } from './UserInfo';
import {
    UserInfoFromJSON,
    UserInfoFromJSONTyped,
    UserInfoToJSON,
    UserInfoToJSONTyped,
} from './UserInfo';

/**
 * 
 * @export
 * @interface FormSignature
 */
export interface FormSignature {
    /**
     * 
     * @type {number}
     * @memberof FormSignature
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FormSignature
     */
    signed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FormSignature
     */
    approved?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FormSignature
     */
    denialReason?: string;
    /**
     * 
     * @type {Date}
     * @memberof FormSignature
     */
    date?: Date;
    /**
     * 
     * @type {Form}
     * @memberof FormSignature
     */
    form?: Form;
    /**
     * 
     * @type {FormTemplateSignature}
     * @memberof FormSignature
     */
    formTemplateSignature?: FormTemplateSignature;
    /**
     * 
     * @type {UserInfo}
     * @memberof FormSignature
     */
    userInfo?: UserInfo;
}

/**
 * Check if a given object implements the FormSignature interface.
 */
export function instanceOfFormSignature(value: object): value is FormSignature {
    return true;
}

export function FormSignatureFromJSON(json: any): FormSignature {
    return FormSignatureFromJSONTyped(json, false);
}

export function FormSignatureFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormSignature {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'signed': json['signed'] == null ? undefined : json['signed'],
        'approved': json['approved'] == null ? undefined : json['approved'],
        'denialReason': json['denialReason'] == null ? undefined : json['denialReason'],
        'date': json['date'] == null ? undefined : (new Date(json['date'])),
        'form': json['form'] == null ? undefined : FormFromJSON(json['form']),
        'formTemplateSignature': json['formTemplateSignature'] == null ? undefined : FormTemplateSignatureFromJSON(json['formTemplateSignature']),
        'userInfo': json['userInfo'] == null ? undefined : UserInfoFromJSON(json['userInfo']),
    };
}

export function FormSignatureToJSON(json: any): FormSignature {
    return FormSignatureToJSONTyped(json, false);
}

export function FormSignatureToJSONTyped(value?: FormSignature | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'signed': value['signed'],
        'approved': value['approved'],
        'denialReason': value['denialReason'],
        'date': value['date'] == null ? undefined : ((value['date']).toISOString()),
        'form': FormToJSON(value['form']),
        'formTemplateSignature': FormTemplateSignatureToJSON(value['formTemplateSignature']),
        'userInfo': UserInfoToJSON(value['userInfo']),
    };
}

