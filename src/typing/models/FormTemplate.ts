/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FormTemplateSignature } from './FormTemplateSignature';
import {
    FormTemplateSignatureFromJSON,
    FormTemplateSignatureFromJSONTyped,
    FormTemplateSignatureToJSON,
    FormTemplateSignatureToJSONTyped,
} from './FormTemplateSignature';
import type { Form } from './Form';
import {
    FormFromJSON,
    FormFromJSONTyped,
    FormToJSON,
    FormToJSONTyped,
} from './Form';
import type { FormTemplateContent } from './FormTemplateContent';
import {
    FormTemplateContentFromJSON,
    FormTemplateContentFromJSONTyped,
    FormTemplateContentToJSON,
    FormTemplateContentToJSONTyped,
} from './FormTemplateContent';

/**
 * 
 * @export
 * @interface FormTemplate
 */
export interface FormTemplate {
    /**
     * 
     * @type {string}
     * @memberof FormTemplate
     */
    formTemplateIdentifier?: string;
    /**
     * 
     * @type {string}
     * @memberof FormTemplate
     */
    formTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof FormTemplate
     */
    formDescription?: string;
    /**
     * 
     * @type {Array<FormTemplateContent>}
     * @memberof FormTemplate
     */
    formTemplateContentSet?: Array<FormTemplateContent>;
    /**
     * 
     * @type {Array<FormTemplateSignature>}
     * @memberof FormTemplate
     */
    formTemplateSignatureSet?: Array<FormTemplateSignature>;
    /**
     * 
     * @type {Array<Form>}
     * @memberof FormTemplate
     */
    formSet?: Array<Form>;
}

/**
 * Check if a given object implements the FormTemplate interface.
 */
export function instanceOfFormTemplate(value: object): value is FormTemplate {
    return true;
}

export function FormTemplateFromJSON(json: any): FormTemplate {
    return FormTemplateFromJSONTyped(json, false);
}

export function FormTemplateFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormTemplate {
    if (json == null) {
        return json;
    }
    return {
        
        'formTemplateIdentifier': json['formTemplateIdentifier'] == null ? undefined : json['formTemplateIdentifier'],
        'formTitle': json['formTitle'] == null ? undefined : json['formTitle'],
        'formDescription': json['formDescription'] == null ? undefined : json['formDescription'],
        'formTemplateContentSet': json['formTemplateContentSet'] == null ? undefined : ((json['formTemplateContentSet'] as Array<any>).map(FormTemplateContentFromJSON)),
        'formTemplateSignatureSet': json['formTemplateSignatureSet'] == null ? undefined : ((json['formTemplateSignatureSet'] as Array<any>).map(FormTemplateSignatureFromJSON)),
        'formSet': json['formSet'] == null ? undefined : ((json['formSet'] as Array<any>).map(FormFromJSON)),
    };
}

export function FormTemplateToJSON(json: any): FormTemplate {
    return FormTemplateToJSONTyped(json, false);
}

export function FormTemplateToJSONTyped(value?: FormTemplate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'formTemplateIdentifier': value['formTemplateIdentifier'],
        'formTitle': value['formTitle'],
        'formDescription': value['formDescription'],
        'formTemplateContentSet': value['formTemplateContentSet'] == null ? undefined : ((value['formTemplateContentSet'] as Array<any>).map(FormTemplateContentToJSON)),
        'formTemplateSignatureSet': value['formTemplateSignatureSet'] == null ? undefined : ((value['formTemplateSignatureSet'] as Array<any>).map(FormTemplateSignatureToJSON)),
        'formSet': value['formSet'] == null ? undefined : ((value['formSet'] as Array<any>).map(FormToJSON)),
    };
}

