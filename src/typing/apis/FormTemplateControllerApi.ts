/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateFormTemplateRequest,
  FormTemplate,
} from '../models/index';
import {
    CreateFormTemplateRequestFromJSON,
    CreateFormTemplateRequestToJSON,
    FormTemplateFromJSON,
    FormTemplateToJSON,
} from '../models/index';

export interface CreateFormTemplateOperationRequest {
    createFormTemplateRequest: CreateFormTemplateRequest;
}

export interface DeleteFormTemplateRequest {
    formTemplateIdentifier: string;
}

export interface GetFormTemplateRequest {
    formTemplateIdentifier: string;
}

export interface GetTemplateFromFormRequest {
    formId: number;
}

/**
 * 
 */
export class FormTemplateControllerApi extends runtime.BaseAPI {

    /**
     */
    async createFormTemplateRaw(requestParameters: CreateFormTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormTemplate>> {
        if (requestParameters['createFormTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'createFormTemplateRequest',
                'Required parameter "createFormTemplateRequest" was null or undefined when calling createFormTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/form_template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFormTemplateRequestToJSON(requestParameters['createFormTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormTemplateFromJSON(jsonValue));
    }

    /**
     */
    async createFormTemplate(requestParameters: CreateFormTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormTemplate> {
        const response = await this.createFormTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteFormTemplateRaw(requestParameters: DeleteFormTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['formTemplateIdentifier'] == null) {
            throw new runtime.RequiredError(
                'formTemplateIdentifier',
                'Required parameter "formTemplateIdentifier" was null or undefined when calling deleteFormTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['formTemplateIdentifier'] != null) {
            queryParameters['formTemplateIdentifier'] = requestParameters['formTemplateIdentifier'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/form_template`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async deleteFormTemplate(requestParameters: DeleteFormTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteFormTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllFormTemplatesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FormTemplate>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/form_template/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FormTemplateFromJSON));
    }

    /**
     */
    async getAllFormTemplates(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FormTemplate>> {
        const response = await this.getAllFormTemplatesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getFormTemplateRaw(requestParameters: GetFormTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormTemplate>> {
        if (requestParameters['formTemplateIdentifier'] == null) {
            throw new runtime.RequiredError(
                'formTemplateIdentifier',
                'Required parameter "formTemplateIdentifier" was null or undefined when calling getFormTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['formTemplateIdentifier'] != null) {
            queryParameters['formTemplateIdentifier'] = requestParameters['formTemplateIdentifier'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/form_template`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormTemplateFromJSON(jsonValue));
    }

    /**
     */
    async getFormTemplate(requestParameters: GetFormTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormTemplate> {
        const response = await this.getFormTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTemplateFromFormRaw(requestParameters: GetTemplateFromFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormTemplate>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling getTemplateFromForm().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['formId'] != null) {
            queryParameters['formId'] = requestParameters['formId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/form_template/form`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormTemplateFromJSON(jsonValue));
    }

    /**
     */
    async getTemplateFromForm(requestParameters: GetTemplateFromFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormTemplate> {
        const response = await this.getTemplateFromFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
