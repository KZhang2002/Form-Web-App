/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateFormRequest,
  Form,
  FormContent,
  FormSignature,
  SignFormRequest,
  UpdateFormContentRequest,
} from '../models/index';
import {
    CreateFormRequestFromJSON,
    CreateFormRequestToJSON,
    FormFromJSON,
    FormToJSON,
    FormContentFromJSON,
    FormContentToJSON,
    FormSignatureFromJSON,
    FormSignatureToJSON,
    SignFormRequestFromJSON,
    SignFormRequestToJSON,
    UpdateFormContentRequestFromJSON,
    UpdateFormContentRequestToJSON,
} from '../models/index';

export interface ArchiveFormRequest {
    formId: number;
}

export interface CreateFormOperationRequest {
    createFormRequest: CreateFormRequest;
}

export interface DeleteFormRequest {
    formId: number;
}

export interface GetFormRequest {
    formId: number;
}

export interface GetFormsByAuthorRequest {
    username: string;
}

export interface GetFormsBySigneeRequest {
    username: string;
}

export interface GetFormsByUserAndFormTypeIdRequest {
    username: string;
    formTypeId: string;
}

export interface GetFormsByUserAndIdRequest {
    username: string;
    formId: number;
}

export interface PublishFormRequest {
    formId: number;
}

export interface SignFormOperationRequest {
    signFormRequest: SignFormRequest;
}

export interface UpdateFormContentOperationRequest {
    updateFormContentRequest: UpdateFormContentRequest;
}

/**
 * 
 */
export class FormControllerApi extends runtime.BaseAPI {

    /**
     */
    async archiveFormRaw(requestParameters: ArchiveFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling archiveForm().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['formId'] != null) {
            queryParameters['formId'] = requestParameters['formId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/form/archive`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     */
    async archiveForm(requestParameters: ArchiveFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Form> {
        const response = await this.archiveFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createFormRaw(requestParameters: CreateFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters['createFormRequest'] == null) {
            throw new runtime.RequiredError(
                'createFormRequest',
                'Required parameter "createFormRequest" was null or undefined when calling createForm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFormRequestToJSON(requestParameters['createFormRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     */
    async createForm(requestParameters: CreateFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Form> {
        const response = await this.createFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteFormRaw(requestParameters: DeleteFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling deleteForm().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['formId'] != null) {
            queryParameters['formId'] = requestParameters['formId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/form`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async deleteForm(requestParameters: DeleteFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFormRaw(requestParameters: GetFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling getForm().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['formId'] != null) {
            queryParameters['formId'] = requestParameters['formId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/form`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     */
    async getForm(requestParameters: GetFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Form> {
        const response = await this.getFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFormsByAuthorRaw(requestParameters: GetFormsByAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Form>>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getFormsByAuthor().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/form/author`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FormFromJSON));
    }

    /**
     */
    async getFormsByAuthor(requestParameters: GetFormsByAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Form>> {
        const response = await this.getFormsByAuthorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFormsBySigneeRaw(requestParameters: GetFormsBySigneeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Form>>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getFormsBySignee().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/form/signee`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FormFromJSON));
    }

    /**
     */
    async getFormsBySignee(requestParameters: GetFormsBySigneeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Form>> {
        const response = await this.getFormsBySigneeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFormsByUserAndFormTypeIdRaw(requestParameters: GetFormsByUserAndFormTypeIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Form>>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getFormsByUserAndFormTypeId().'
            );
        }

        if (requestParameters['formTypeId'] == null) {
            throw new runtime.RequiredError(
                'formTypeId',
                'Required parameter "formTypeId" was null or undefined when calling getFormsByUserAndFormTypeId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        if (requestParameters['formTypeId'] != null) {
            queryParameters['formTypeId'] = requestParameters['formTypeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/form/user_and_type`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FormFromJSON));
    }

    /**
     */
    async getFormsByUserAndFormTypeId(requestParameters: GetFormsByUserAndFormTypeIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Form>> {
        const response = await this.getFormsByUserAndFormTypeIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFormsByUserAndIdRaw(requestParameters: GetFormsByUserAndIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getFormsByUserAndId().'
            );
        }

        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling getFormsByUserAndId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        if (requestParameters['formId'] != null) {
            queryParameters['formId'] = requestParameters['formId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/form/user_and_id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     */
    async getFormsByUserAndId(requestParameters: GetFormsByUserAndIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Form> {
        const response = await this.getFormsByUserAndIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async publishFormRaw(requestParameters: PublishFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling publishForm().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['formId'] != null) {
            queryParameters['formId'] = requestParameters['formId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/form/publish`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     */
    async publishForm(requestParameters: PublishFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Form> {
        const response = await this.publishFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async signFormRaw(requestParameters: SignFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormSignature>> {
        if (requestParameters['signFormRequest'] == null) {
            throw new runtime.RequiredError(
                'signFormRequest',
                'Required parameter "signFormRequest" was null or undefined when calling signForm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/form/sign`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SignFormRequestToJSON(requestParameters['signFormRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormSignatureFromJSON(jsonValue));
    }

    /**
     */
    async signForm(requestParameters: SignFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormSignature> {
        const response = await this.signFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateFormContentRaw(requestParameters: UpdateFormContentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormContent>> {
        if (requestParameters['updateFormContentRequest'] == null) {
            throw new runtime.RequiredError(
                'updateFormContentRequest',
                'Required parameter "updateFormContentRequest" was null or undefined when calling updateFormContent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/form/content`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFormContentRequestToJSON(requestParameters['updateFormContentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormContentFromJSON(jsonValue));
    }

    /**
     */
    async updateFormContent(requestParameters: UpdateFormContentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormContent> {
        const response = await this.updateFormContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
